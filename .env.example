# Atomic Bundler Environment Configuration
# Copy this file to .env and fill in your actual values

# =============================================================================
# REQUIRED: Payment Signer Configuration
# =============================================================================

# Private key for signing payment transactions (tx2)
# This should be a hex string without 0x prefix
# Example: 1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef
PAYMENT_SIGNER_PRIVATE_KEY=your_private_key_here

# =============================================================================
# REQUIRED: Ethereum RPC Configuration  
# =============================================================================

# Ethereum RPC endpoint for getting network state (base fee, nonces, etc.)
# Examples:
# - Mainnet: https://eth-mainnet.alchemyapi.io/v2/YOUR-API-KEY
# - Sepolia: https://eth-sepolia.g.alchemy.com/v2/YOUR-API-KEY
# - Local: http://localhost:8545
ETH_RPC_URL=https://eth-mainnet.alchemyapi.io/v2/YOUR-API-KEY

# =============================================================================
# OPTIONAL: Server Configuration
# =============================================================================

# Port for the HTTP API server (default: 8080)
PORT=8080

# Host to bind the server to (default: 0.0.0.0)
HOST=0.0.0.0

# =============================================================================
# OPTIONAL: Database Configuration
# =============================================================================

# SQLite database file path (default: ./atomic_bundler.db)
DATABASE_URL=sqlite:./atomic_bundler.db

# Database connection pool size (default: 10)
DATABASE_MAX_CONNECTIONS=10

# =============================================================================
# OPTIONAL: Logging Configuration
# =============================================================================

# Log level: trace, debug, info, warn, error (default: info)
RUST_LOG=info

# Log format: json or pretty (default: pretty)
LOG_FORMAT=pretty

# =============================================================================
# OPTIONAL: Security Configuration
# =============================================================================

# Enable killswitch on startup (default: false)
KILLSWITCH_ENABLED=false

# =============================================================================
# DEVELOPMENT: Override gas parameters (not recommended for production)
# =============================================================================

# Override max fee per gas in wei (leave empty to use RPC-based calculation)
# TX2_MAX_FEE_WEI=50000000000

# Override priority fee per gas in wei (leave empty to use defaults)
# TX2_PRIORITY_FEE_WEI=2000000000

# Override gas limit for payment transactions (default: 21000)
# TX2_GAS_LIMIT=21000

# =============================================================================
# DEVELOPMENT: Testing Configuration
# =============================================================================

# Enable test mode (disables actual relay submissions)
# TEST_MODE=true

# Mock relay responses (for testing without real relays)
# MOCK_RELAY_RESPONSES=true

# =============================================================================
# EXAMPLE CONFIGURATION VALUES
# =============================================================================

# Here's a complete example for Sepolia testnet:
#
# PAYMENT_SIGNER_PRIVATE_KEY=ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80
# ETH_RPC_URL=https://eth-sepolia.g.alchemy.com/v2/demo
# PORT=8080
# DATABASE_URL=sqlite:./atomic_bundler.db
# RUST_LOG=info
# LOG_FORMAT=pretty

# =============================================================================
# SECURITY NOTES
# =============================================================================

# 1. NEVER commit your actual .env file to version control
# 2. The PAYMENT_SIGNER_PRIVATE_KEY should have sufficient ETH for gas fees
# 3. Use different private keys for different environments (dev/staging/prod)
# 4. Consider using a hardware wallet or key management service in production
# 5. Regularly rotate your API keys and private keys
# 6. Monitor the payment signer account balance and transaction activity

# =============================================================================
# QUICK START
# =============================================================================

# 1. Copy this file: cp .env.example .env
# 2. Set PAYMENT_SIGNER_PRIVATE_KEY to your private key (without 0x)
# 3. Set ETH_RPC_URL to your Ethereum RPC endpoint
# 4. Run: cargo run --bin middleware
# 5. Test with: curl -X POST http://localhost:8080/healthz

# =============================================================================
# TESTING: Transaction Creation
# =============================================================================

# Private key for creating test transactions (separate from payment signer)
# This should be a test account with some ETH for gas fees
# TEST_PRIVATE_KEY=ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80
